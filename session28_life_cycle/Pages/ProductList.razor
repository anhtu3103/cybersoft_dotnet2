@page "/products"
@inject ProductService ProductService


<h1 class="text-primary">Product List</h1>

@* thanh search *@
<div class="input-group mb-3">
    <input type="text"
    class="form-control"
    placeholder="Search product...."
    @bind="searchQuery"
    @bind:event="oninput"
    @onkeypress="HandleKeyPress">
    <button class="btn btn-primary" @onclick="SearchProducts">Search</button>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading...</p>
    </div>
}
else if (products.Count == 0)
{
    <p>No product found...</p>
}
else
{
    <div class="row row-col-3">
        @foreach (var product in displayProducts)
        {
            <ProductItem product="product" />
        }
    </div>
}

@* phân trang *@
<div class="mt-4 d-flex justify-content-center">
    <button class="btn btn-primary">Prev</button>
    <span>Page @currentPage/@totalPages</span>
    <button class="btn btn-primary" @onclick="NextPage">Next</button>
</div>

@code {
    private List<Product> products = new List<Product>();

    @* Biến list product để show list sản phẩm dựa vào page *@
    private List<Product> displayProducts = new List<Product>();
    @* difine var filterProducts to show list by keyword *@
    private List<Product> filterProducts = new List<Product>();

    private bool isLoading = true; // biến kiểm tra xem có đang load dữ liệu hay không
    private string searchQuery = ""; // biến lưu trữ giá trị của ô search
    private int currentPage = 1; // biến lưu trữ trang hiện tại
    private int pageSize = 6; // biến lưu trữ số lượng sản phẩm trên 1 trang
    private int totalPages;
    private int TotalPages
    {
        get
        {
            return (int)Math.Ceiling((double)displayProducts.Count / pageSize);
        }
        set
        {
            totalPages = value;
        }
    }



    @* dùng hàm OnInitializedAsync để call API *@
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            products = await ProductService.GetProductsAsync();
            UpdateDisplayProducts();
            isLoading = false;

            @* Cập nhật UI *@
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void UpdateDisplayProducts()
    {
        displayProducts = products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
        StateHasChanged();
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdateDisplayProducts();
        }
    }
    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdateDisplayProducts();
        }
    }

    @* define function search product *@
    private void SearchProducts()
    {
        var filterProducts = products.Where(p =>
        string.IsNullOrEmpty(searchQuery) ||
        p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        currentPage = 1;

        displayProducts = filterProducts;
        totalPages = (int)Math.Ceiling((double)displayProducts.Count / pageSize);
        StateHasChanged();

    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Console.WriteLine("Enter key pressed");
            SearchProducts();
        }
    }
}